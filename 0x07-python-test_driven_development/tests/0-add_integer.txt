===============================
Test cases for 0-add_integer.py
===============================

The function adds two integers, the values
should be either be int or float otherwise raise a TypeError

    >>> add_integer = __import__('0-add_integer').add_integer

Documentation
=============
Check if our modules and functions are documented.
    >>> module_doc = __import__('0-add_integer').__doc__
    >>> print(len(module_doc) > 0)
    True

    >>> function_doc = __import__('0-add_integer').add_integer.__doc__
    >>> print(len(function_doc) > 0)
    True

Test cases
==========
Testing the default b number
----------------------------
    >>> add_integer(10)
    108

    >>> add_integer(-5)
    93

    >> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer


Testing general numbers
------------------------

    >>> add_integer(3, 4)
    7

    >>> add_integer(100, -3)
    97

    >>> add_integer(-100, 7)
    -93

    >>> add_integer(-4, -3)
    -7

Testing with floats
-------------------

    >>> add_integer(78.3, 5)
    83

    >>> add_integer(85.9, -5)
    80

    >>> add_integer(-88.6, 8)
    -80

    >>> add_integer(-13.5, -7.5)
    -20

Infinity
--------

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(-float('Nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


TypeError
----------

    >>> add_integer("hello", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({"hello", 3}, 7)
    Traceback (most recent call last):
    TypeError: a must be an integer
    
    >>> add_integer(7, {"hello", 3})
    Traceback (most recent call last):
    TypeError: b must be an integer

Big numbers
===========
Parcing a really big number
    >>> add_integer(2147483648214748364821474836482147483648, 2)
    2147483648214748364821474836482147483650

Testing arguments
=================
Parcing 0 args, one arg and more thant two args
minimun arguments needed: 1

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(23)
    121

    >>> add_integer(3, 4, 13)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> add_integer(,)
    Traceback (most recent call last):
    SyntaxError: invalid syntax